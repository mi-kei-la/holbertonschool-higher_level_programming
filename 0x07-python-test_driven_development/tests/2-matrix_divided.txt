>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix_divided([[1, 2, 3], [5, 8, 3]], 1) #regular matrix
[[1.0, 2.0, 3.0], [5.0, 8.0, 3.0]]

>>> matrix_divided([[1, 2.5, 3], [5, 8.3, 3]], 2) #floats and ints
[[0.5, 1.25, 1.5], [2.5, 4.15, 1.5]]

>>> matrix_divided([[1, -2.5, 3], [5, -8.3, 3]], 2) #negatives
[[0.5, -1.25, 1.5], [2.5, -4.15, 1.5]]

>>> matrix_divided([[1, 2.5, 3], [5, 8.3, 3]], -2) #negative div
[[-0.5, -1.25, -1.5], [-2.5, -4.15, -1.5]]

>>> matrix_divided([[1, 2, 3], [5, 8, 3]]) #no div
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided(8) #no matrix
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided() #no parameters
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> matrix_divided([[1, 2], [1, 2, 3]], 2) #dif sizes
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[1, 2, 3]], 2) #single row matrix
[[0.5, 1.0, 1.5]]

>>> matrix_divided([1, 2, 3], 2) #just a list
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, 3, 5]], 'yes') #div as str
Traceback (most recent call last):
...
TypeError: div must be a number

>>> matrix_divided('yes', 2) #str as matrix
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, 3], ['no', 2, 3]], 2) #str as value
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, 3], [5, 8, 3]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero